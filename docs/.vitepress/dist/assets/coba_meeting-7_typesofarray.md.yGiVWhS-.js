import{_ as e,c as a,o as i,U as n}from"./chunks/framework.EUmXWpxD.js";const p=JSON.parse('{"title":"Static Array - Types of Array","description":"","frontmatter":{"layout":"doc","title":"Static Array - Types of Array","prev":{"text":"Example Use","link":"./exampleuse"},"next":{"text":"Initialize Array","link":"./initializearray"}},"headers":[],"relativePath":"coba/meeting-7/typesofarray.md","filePath":"coba/meeting-7/typesofarray.md"}'),o={name:"coba/meeting-7/typesofarray.md"},t=n('<h1 id="types-of-array" tabindex="-1">Types of Array <a class="header-anchor" href="#types-of-array" aria-label="Permalink to &quot;Types of Array&quot;">​</a></h1><h2 id="based-on-dimensional" tabindex="-1">Based on Dimensional <a class="header-anchor" href="#based-on-dimensional" aria-label="Permalink to &quot;Based on Dimensional&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">One Dimensional Array</p><ul><li>A basic array where elements are arranged in a single row or a single column.</li><li>Elements are accessed using a single index.</li><li><strong>Example:</strong> int numbers[5]; creates an array capable of holding five integers.</li></ul></div><div class="info custom-block"><p class="custom-block-title">Multi Dimensional Array</p><ul><li>An array containing one or more arrays as its elements.</li><li>Elements are arranged in rows and columns (two-dimensional), or in multiple dimensions (three-dimensional or higher).</li><li><strong>Example:</strong> int matrix[3][3]; creates a two-dimensional array representing a 3x3 matrix.</li></ul></div><h2 id="based-on-size" tabindex="-1">Based on Size <a class="header-anchor" href="#based-on-size" aria-label="Permalink to &quot;Based on Size&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">Static Array</p><ul><li><strong>Fixed Size:</strong> Size is determined at compile time and remains constant throughout program execution.</li><li><strong>Memory Allocation:</strong> Occupying a fixed amount of memory, allocated on the stack, fast access but limited space.</li><li><strong>Cannot Resize:</strong> Once declared, the size cannot be changed during runtime.</li></ul></div><div class="info custom-block"><p class="custom-block-title">Dynamic Array</p><ul><li><strong>Size Flexibility:</strong> Size can be adjusted during runtime.</li><li><strong>Memory Allocation:</strong> Allowing for flexibility in memory usage, allocated on the heap, more flexible but slower access.</li><li><strong>Resizable</strong>: The size can be changed as needed during program execution.</li><li>Often used when the size of the array is not known beforehand or needs to change dynamically based on program logic.</li></ul></div>',7),r=[t];function s(l,c,d,m,u,g){return i(),a("div",null,r)}const h=e(o,[["render",s]]);export{p as __pageData,h as default};
