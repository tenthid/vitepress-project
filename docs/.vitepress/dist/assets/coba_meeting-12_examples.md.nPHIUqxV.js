import{_ as e,c as a,o,U as t}from"./chunks/framework.EUmXWpxD.js";const u=JSON.parse('{"title":"Searching - Examples of Searching","description":"","frontmatter":{"layout":"doc","title":"Searching - Examples of Searching","prev":{"text":"Types of Searching","link":"./typesofsearching"},"next":{"text":"Linear Searching","link":"./linearsearching"}},"headers":[],"relativePath":"coba/meeting-12/examples.md","filePath":"coba/meeting-12/examples.md"}'),i={name:"coba/meeting-12/examples.md"},n=t('<h1 id="examples-of-searching" tabindex="-1">Examples of Searching <a class="header-anchor" href="#examples-of-searching" aria-label="Permalink to &quot;Examples of Searching&quot;">â€‹</a></h1><p>There are several instances in everyday life where searching techniques in programming can be employed to aid in problem-solving or streamline processes:</p><div class="tip custom-block"><p class="custom-block-title">1. Finding a Recipe in a Cookbook</p><p>Imagine you have a cookbook with various recipes. You&#39;d start from the beginning or a particular section and scan through the pages until you find the recipe you want. Similarly, a search algorithm in programming would systematically go through a collection of data (like an array or list) to locate a specific item (in this case, a recipe) by checking each element until it finds the desired one or exhausts the search.</p></div><div class="tip custom-block"><p class="custom-block-title">2. Searching for a Contact in a Phone Book</p><p>Consider searching for a contact in a phone book or contacts list on a phone. You&#39;d start from the beginning or use the alphabetical ordering to quickly navigate to a particular section and scan through the names until you find the contact you&#39;re looking for.</p></div>',4),r=[n];function c(s,l,h,p,m,g){return o(),a("div",null,r)}const f=e(i,[["render",c]]);export{u as __pageData,f as default};
