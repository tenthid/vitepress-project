import{_ as t,c as e,o as a,U as d}from"./chunks/framework.EUmXWpxD.js";const m=JSON.parse('{"title":"Data Types and Variables - Variables","description":"","frontmatter":{"layout":"doc","title":"Data Types and Variables - Variables","next":{"text":"Variables","link":"./variables"},"prev":{"text":"Introduction","link":"./introduction"}},"headers":[],"relativePath":"coba/meeting-2/typesofdata.md","filePath":"coba/meeting-2/typesofdata.md"}'),o={name:"coba/meeting-2/typesofdata.md"},r=d('<h1 id="types-of-data" tabindex="-1">Types of Data <a class="header-anchor" href="#types-of-data" aria-label="Permalink to &quot;Types of Data&quot;">​</a></h1><h2 id="char" tabindex="-1">Char <a class="header-anchor" href="#char" aria-label="Permalink to &quot;Char&quot;">​</a></h2><ul><li>a single character</li><li>example: such as letters, digits, or special symbols</li></ul><h2 id="string" tabindex="-1">String <a class="header-anchor" href="#string" aria-label="Permalink to &quot;String&quot;">​</a></h2><ul><li>a sequence of characters grouped together. It can consist of letters, numbers, symbols, spaces, and even empty spaces</li><li>example: ‘name’, ‘hobby’</li></ul><h2 id="integer" tabindex="-1">Integer <a class="header-anchor" href="#integer" aria-label="Permalink to &quot;Integer&quot;">​</a></h2><ul><li>whole numbers, both positive and negative, without any decimal points or fractional parts</li><li>example: 3, 1, 299</li></ul><h2 id="boolean" tabindex="-1">Boolean <a class="header-anchor" href="#boolean" aria-label="Permalink to &quot;Boolean&quot;">​</a></h2><ul><li>only two possible values, true or false</li></ul><h2 id="types-of-data-in-programing-langguage" tabindex="-1">Types of Data in Programing Langguage <a class="header-anchor" href="#types-of-data-in-programing-langguage" aria-label="Permalink to &quot;Types of Data in Programing Langguage&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">C</p><table><thead><tr><th>Primitve Data Types</th><th>Derived Data Types</th></tr></thead><tbody><tr><td><code>int</code> Integer data type that holds whole numbers.</td><td><code>Arrays</code> Collection of similar data items.</td></tr><tr><td><code>float</code> Floating-point data type that holds decimal numbers.</td><td><code>Pointers</code> Variables that store memory addresses</td></tr><tr><td><code>char</code> Character data type that holds single characters.</td><td><code>Structures</code> Collection of different data types under one name</td></tr><tr><td><code>double</code> Double-precision floating-point data type for larger decimal numbers.</td><td></td></tr><tr><td><code>_Bool</code> Boolean data type that holds true or false values.</td><td></td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">C++</p><table><thead><tr><th>Primitve Data Types</th><th>Additional Data Types</th><th>Derived Data Types</th></tr></thead><tbody><tr><td><code>int</code> <code>float</code> <code>char</code> <code>_Bool</code></td><td><code>bool</code> Boolean data type that holds true or false values (not underscored like in C).</td><td><code>Arrays</code> <code>Pointers</code> <code>Structures</code></td></tr><tr><td></td><td><code>long</code> Extended size integer.</td><td></td></tr><tr><td></td><td><code>long long</code> Larger integer than long.</td><td></td></tr><tr><td></td><td><code>unsigned int</code> nsigned integer (cannot hold negative values).</td><td></td></tr><tr><td></td><td><code>wchar_t</code> Wide character data type for storing wide characters.</td><td></td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">Java</p><table><thead><tr><th>Primitve Data Types</th><th>Derived Data Types</th></tr></thead><tbody><tr><td><code>int</code> Integer data type that holds whole numbers.</td><td><code>Arrays</code> Collection of similar data items.</td></tr><tr><td><code>float</code> Single-precision floating-point data type for decimal numbers.</td><td><code>Strings</code> Sequence of characters treated as a data type.</td></tr><tr><td><code>boolean</code> Boolean data type for true or false values.</td><td><code>Classes</code> Blueprint for objects.</td></tr><tr><td>Interfaces, Enumerations, etc.</td><td></td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">Python</p><table><thead><tr><th>Primitve Data Types</th><th>Derived Data Types</th><th>Additional Data Types</th></tr></thead><tbody><tr><td><code>int</code> Integer data type that holds whole number.</td><td><code>List</code> Collection of similar or different data items.</td><td><code>None</code> Represents the absence of a value or a null value.</td></tr><tr><td><code>float</code> Floating-point data type that holds decimal numbers.</td><td><code>Tuples</code> Immutable collection of ordered elements.</td><td></td></tr><tr><td><code>str</code> String data type that holds sequences of characters.</td><td><code>Sets</code> Unordered collection of unique elements.</td><td></td></tr><tr><td><code>bool</code> Boolean data type that holds True or False values.</td><td><code>Dictionaries</code> Collection of key-value pairs.</td><td></td></tr><tr><td></td><td><code>Custom Classes</code> User-defined data types.</td><td></td></tr></tbody></table></div>',14),l=[r];function s(i,c,n,h,p,u){return a(),e("div",null,l)}const y=t(o,[["render",s]]);export{m as __pageData,y as default};
