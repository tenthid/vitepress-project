import{_ as e,c as t,o as a,U as o}from"./chunks/framework.EUmXWpxD.js";const h=JSON.parse('{"title":"Function - Introduction","description":"","frontmatter":{"layout":"doc","title":"Function - Introduction","prev":{"text":"Meeting 9 - Exercise","link":"../meeting-9/exercise"},"next":{"text":"Example of Use","link":"./exampleuse"}},"headers":[],"relativePath":"coba/meeting-10/introduction.md","filePath":"coba/meeting-10/introduction.md"}'),n={name:"coba/meeting-10/introduction.md"},i=o('<h1 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h1><p><code>Function</code> are modular blocks of code designed to perform a specific task or set of tasks. They encapsulate logic, enabling reuse and abstraction in programming.</p><h2 id="purpose" tabindex="-1">Purpose <a class="header-anchor" href="#purpose" aria-label="Permalink to &quot;Purpose&quot;">​</a></h2><p>The <strong>purpose</strong> is to break down complex operations into smaller, more manageable chunks, enhancing readability and maintainability in code.</p><h2 id="advantages" tabindex="-1">Advantages <a class="header-anchor" href="#advantages" aria-label="Permalink to &quot;Advantages&quot;">​</a></h2><ul><li>Code reusability (write once, use multiple times)</li><li>Abstraction (hiding implementation details)</li><li>Improved organization of code</li></ul>',6),r=[i];function s(c,d,l,u,p,m){return a(),t("div",null,r)}const g=e(n,[["render",s]]);export{h as __pageData,g as default};
