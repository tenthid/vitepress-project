import{_ as a,c as e,o as t,U as s}from"./chunks/framework.EUmXWpxD.js";const g=JSON.parse('{"title":"Dynamic Array - Clear or Empty Array","description":"","frontmatter":{"layout":"doc","title":"Dynamic Array - Clear or Empty Array","prev":{"text":"Update Array","link":"./updatearray"},"next":{"text":"Example","link":"./example"}},"headers":[],"relativePath":"coba/meeting-9/clearemptyarray.md","filePath":"coba/meeting-9/clearemptyarray.md"}'),r={name:"coba/meeting-9/clearemptyarray.md"},i=s('<h1 id="clear-or-empty-array" tabindex="-1">Clear or Empty Array <a class="header-anchor" href="#clear-or-empty-array" aria-label="Permalink to &quot;Clear or Empty Array&quot;">​</a></h1><h2 id="c" tabindex="-1">C <a class="header-anchor" href="#c" aria-label="Permalink to &quot;C&quot;">​</a></h2><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">free</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arrayName);</span></span></code></pre></div><ul><li><strong>free()</strong> is the function to deallocate the memory allocated for a dynamically allocated array using malloc() or calloc(). It releases the memory to prevent memory leaks</li></ul><h2 id="c-1" tabindex="-1">C++ <a class="header-anchor" href="#c-1" aria-label="Permalink to &quot;C++&quot;">​</a></h2><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">delete[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arrayName;</span></span></code></pre></div><ul><li><strong>delete[]</strong> ensures that memory is properly deallocated, preventing memory leaks for arrays allocated with new[].</li></ul><h2 id="java" tabindex="-1">Java <a class="header-anchor" href="#java" aria-label="Permalink to &quot;Java&quot;">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arrayName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><ul><li><strong>clear()</strong> method removes all elements from the ArrayList, allowing the garbage collector to reclaim memory associated with those elements.</li></ul><h2 id="python" tabindex="-1">Python <a class="header-anchor" href="#python" aria-label="Permalink to &quot;Python&quot;">​</a></h2><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">array_name.clear()</span></span></code></pre></div><ul><li><strong>clear()</strong> is a method that is more straightforward for clearing the elements of a dynamic array-like structure in Python.</li></ul>',13),l=[i];function o(n,c,h,p,d,y){return t(),e("div",null,l)}const u=a(r,[["render",o]]);export{g as __pageData,u as default};
