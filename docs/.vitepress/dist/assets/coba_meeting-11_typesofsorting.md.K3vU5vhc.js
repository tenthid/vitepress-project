import{_ as e,c as t,o as r,U as a}from"./chunks/framework.EUmXWpxD.js";const b=JSON.parse('{"title":"Sort - Types of Sorting","description":"","frontmatter":{"layout":"doc","title":"Sort - Types of Sorting","prev":{"text":"Introduction","link":"./introduction"},"next":{"text":"Examples of Sorting","link":"./examples"}},"headers":[],"relativePath":"coba/meeting-11/typesofsorting.md","filePath":"coba/meeting-11/typesofsorting.md"}'),o={name:"coba/meeting-11/typesofsorting.md"},i=a('<h1 id="types-of-sorting" tabindex="-1">Types of Sorting <a class="header-anchor" href="#types-of-sorting" aria-label="Permalink to &quot;Types of Sorting&quot;">​</a></h1><h2 id="bubble-sort" tabindex="-1">Bubble Sort <a class="header-anchor" href="#bubble-sort" aria-label="Permalink to &quot;Bubble Sort&quot;">​</a></h2><ul><li>Iterates through the array, comparing adjacent elements and swapping them if they&#39;re in the wrong order. Repeats this process until the array is sorted.</li></ul><h2 id="quick-sort" tabindex="-1">Quick Sort <a class="header-anchor" href="#quick-sort" aria-label="Permalink to &quot;Quick Sort&quot;">​</a></h2><ul><li>Chooses a &#39;pivot&#39; element and partitions the array into smaller subarrays, placing elements smaller than the pivot to its left and elements larger than the pivot to its right. Recursively sorts these subarrays.</li></ul><h2 id="selection-sort" tabindex="-1">Selection Sort <a class="header-anchor" href="#selection-sort" aria-label="Permalink to &quot;Selection Sort&quot;">​</a></h2><ul><li>Divides the array into sorted and unsorted portions. Finds the smallest element in the unsorted section and swaps it with the first unsorted element. Repeats until the array is sorted.</li></ul><h2 id="insertion-sort" tabindex="-1">Insertion Sort <a class="header-anchor" href="#insertion-sort" aria-label="Permalink to &quot;Insertion Sort&quot;">​</a></h2><ul><li>Builds the sorted array one element at a time by iterating through the array and placing each element in its correct position within the sorted portion.</li></ul><h2 id="merge-sort" tabindex="-1">Merge Sort <a class="header-anchor" href="#merge-sort" aria-label="Permalink to &quot;Merge Sort&quot;">​</a></h2><ul><li>Divides the array into smaller subarrays until each subarray contains only one element. Merges these subarrays in sorted order until the entire array is sorted.</li></ul><h2 id="heap-sort" tabindex="-1">Heap Sort <a class="header-anchor" href="#heap-sort" aria-label="Permalink to &quot;Heap Sort&quot;">​</a></h2><ul><li>Builds a heap from the array, rearranging the elements to form a heap data structure. Repeatedly extracts the maximum element from the heap and rebuilds the heap until the array is sorted.</li></ul>',13),s=[i];function n(l,h,d,u,c,p){return r(),t("div",null,s)}const f=e(o,[["render",n]]);export{b as __pageData,f as default};
