import{_ as s,c as i,o as a,U as n}from"./chunks/framework.EUmXWpxD.js";const E=JSON.parse('{"title":"Object-Oriented Programing Part 2 - Encapsulation","description":"","frontmatter":{"layout":"doc","title":"Object-Oriented Programing Part 2 - Encapsulation","prev":{"text":"Introduction","link":"./introduction"},"next":{"text":"Inheritance","link":"./inheritance"}},"headers":[],"relativePath":"coba/meeting-14/encapsulation.md","filePath":"coba/meeting-14/encapsulation.md"}'),t={name:"coba/meeting-14/encapsulation.md"},e=n(`<h1 id="encapsulation" tabindex="-1">Encapsulation <a class="header-anchor" href="#encapsulation" aria-label="Permalink to &quot;Encapsulation&quot;">​</a></h1><p><code>Encapsulation</code> involves bundling the data (attributes) and methods (functions or behaviors) that operate on the data within a single unit, i.e., a class. It <strong>restricts access to certain components</strong>, hiding the internal state of an object from the outside, and exposing only the necessary functionalities through well-defined interfaces.</p><div class="info custom-block"><p class="custom-block-title">In C++ and Java, the encapsulation aspect is showcased through the use of access <code>modifiers</code>.</p><ol><li>Private -&gt; restrict access to class members only within the same class where they are declared. They are not accessible from outside the class.</li><li>Public -&gt; allow unrestricted access to the class members from anywhere in the program.</li><li>Protected -&gt; provide access to the class members within the same class and subclasses (classes that inherit from the parent class).</li></ol></div><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-N5Bru" id="tab-ENqcodF" checked="checked"><label for="tab-ENqcodF">C++</label><input type="radio" name="group-N5Bru" id="tab-fGavJjF"><label for="tab-fGavJjF">Java</label><input type="radio" name="group-N5Bru" id="tab-PHzO-oq"><label for="tab-PHzO-oq">Python</label></div><div class="blocks"><div class="language-c++ vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Smartphone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::string brand;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::string color;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> memory;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> screen_size;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> powerOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SmartPhone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String brand;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String color;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> memory;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> screenSize;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> powerOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SmartPhone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, brand, color, memory, screen_size):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._brand </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> brand  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Use a single underscore to indicate a &quot;protected&quot; attribute</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> color</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._memory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> memory</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._screen_size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> screen_size</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> power_on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span></code></pre></div></div></div><p><strong>Attributes</strong> are made <strong>private</strong> in a class to keep them hidden and secure inside, preventing direct access or modification from outside the class. On the other hand, <strong>methods</strong> are often made <strong>public</strong> to provide controlled ways to interact with and modify these private attributes.</p><div class="info custom-block"><p class="custom-block-title">In <strong>Python</strong></p><p>Encapsulation is achieved through <strong>naming conventions</strong> and properties. Although Python doesn&#39;t have explicit access modifiers like Java (public, private), it uses a convention to indicate the level of visibility.</p><ul><li>Attributes (_brand, _color, _memory, _screen_size) are prefixed with a <strong>single underscore</strong>, indicating that they are intended for internal use (protected).</li></ul></div><h2 id="exercise" tabindex="-1">Exercise <a class="header-anchor" href="#exercise" aria-label="Permalink to &quot;Exercise&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">What to do?</p><p>Create a Class of Product, with attributes:</p><ul><li>name,</li><li>productId (int),</li><li>price (double),</li><li>inStock (boolean)</li></ul><p>and a method to display the product detail.<br><code>Implement the concept of encapsulation</code> that you’ve just learned!</p><p>Create an Object of Product and then call the method.</p></div>`,8),l=[e];function p(h,r,o,c,k,d){return a(),i("div",null,l)}const u=s(t,[["render",p]]);export{E as __pageData,u as default};
