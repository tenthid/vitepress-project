import{_ as t,c as o,o as e,U as i}from"./chunks/framework.EUmXWpxD.js";const n="/assets/OOP-intro-img.f6b_Yyl0.png",h=JSON.parse('{"title":"Object-Oriented Programing Part 1 - Introduction","description":"","frontmatter":{"layout":"doc","title":"Object-Oriented Programing Part 1 - Introduction","prev":{"text":"Binary Searching","link":"../meeting-12/binarysearch"},"next":{"text":"Advantages of OOP","link":"./oopadvantages"}},"headers":[],"relativePath":"coba/meeting-13/introduction.md","filePath":"coba/meeting-13/introduction.md"}'),a={name:"coba/meeting-13/introduction.md"},r=i('<h1 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">â€‹</a></h1><p><code>Object-Oriented Programming (OOP)</code> is a programming paradigm that organizes code around the concept of &quot;objects,&quot; which can contain data (attributes or properties) and code (methods or functions). The components of OOP are classes, objects, attributes, and methods</p><div class="info custom-block"><p class="custom-block-title">The key principles of OOP are:</p><ol><li>Encapsulation</li><li>Abstraction</li><li>Inheritance</li><li>Polymorphism</li></ol></div><p><img src="'+n+'" alt="OOP intro img"></p><p><code>OOP</code> promotes modularity, reusability, and a more intuitive way of thinking about and structuring code by organizing it around objects and their interactions.</p>',5),c=[r];function s(d,l,m,p,u,_){return e(),o("div",null,c)}const b=t(a,[["render",s]]);export{h as __pageData,b as default};
