import{_ as e,c as t,o as r,U as n}from"./chunks/framework.EUmXWpxD.js";const u=JSON.parse('{"title":"Arithmetic Operators - Operator Precedence","description":"","frontmatter":{"layout":"doc","title":"Arithmetic Operators - Operator Precedence","prev":{"text":"Increment and Decrement","link":"./incrementdecrement"},"next":{"text":"Meeting 5 - Introduction","link":"../meeting-5/introduction"}},"headers":[],"relativePath":"coba/meeting-4/operatorprecedence.md","filePath":"coba/meeting-4/operatorprecedence.md"}'),o={name:"coba/meeting-4/operatorprecedence.md"},a=n('<h1 id="operator-precedence" tabindex="-1">Operator Precedence <a class="header-anchor" href="#operator-precedence" aria-label="Permalink to &quot;Operator Precedence&quot;">â€‹</a></h1><ul><li><code>Operator precedence</code> defines the order in which different operators are evaluated in an expression. It ensures that expressions are computed in a predictable and consistent manner.</li></ul><div class="tip custom-block"><p class="custom-block-title"><strong>Rules</strong></p><ul><li><strong>Parentheses:</strong> Operations within parentheses are evaluated first.</li><li><strong>Multiplication and Division:</strong> These operations have higher precedence than addition and subtraction.</li><li><strong>Addition and Subtraction:</strong> These operations have the next level of precedence.</li></ul></div>',3),c=[a];function i(s,d,p,l,h,_){return r(),t("div",null,c)}const g=e(o,[["render",i]]);export{u as __pageData,g as default};
