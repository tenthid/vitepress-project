import{_ as e,c as a,o as i,U as t}from"./chunks/framework.EUmXWpxD.js";const u=JSON.parse('{"title":"Arithmetic Operators - Increment and Decrement","description":"","frontmatter":{"layout":"doc","title":"Arithmetic Operators - Increment and Decrement","prev":{"text":"Modulo","link":"./modulo"},"next":{"text":"Operator Precedence","link":"./operatorprecedence"}},"headers":[],"relativePath":"coba/meeting-4/incrementdecrement.md","filePath":"coba/meeting-4/incrementdecrement.md"}'),n={name:"coba/meeting-4/incrementdecrement.md"},s=t(`<h1 id="increment-and-decrement" tabindex="-1">Increment and Decrement <a class="header-anchor" href="#increment-and-decrement" aria-label="Permalink to &quot;Increment and Decrement&quot;">​</a></h1><p><code>Increment</code> and <code>decrement</code> are unary arithmetic operators used to increase or decrease the value of a variable <strong>by 1</strong>, respectively. These operators are commonly denoted as &quot;++&quot; and &quot;--&quot;.</p><h2 id="increment-operator" tabindex="-1">Increment Operator <a class="header-anchor" href="#increment-operator" aria-label="Permalink to &quot;Increment Operator&quot;">​</a></h2><ul><li>Post-increment (a++)</li><li>Pre-increment (++a)</li></ul><h2 id="decrement-operator" tabindex="-1">Decrement Operator <a class="header-anchor" href="#decrement-operator" aria-label="Permalink to &quot;Decrement Operator&quot;">​</a></h2><ul><li>Post-decrement (a--)</li><li>Pre-decrement (--a)</li></ul><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-cmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li>The variable &#39;x&#39; initially holds the value 5.</li><li>++x increments &#39;x&#39; by 1 (x becomes 6) and assigns this updated value to &#39;y&#39;, so &#39;y&#39; becomes 6.</li><li>y-- uses the current value of &#39;y&#39; (which is 6) in an expression, and then decrements &#39;y&#39; by 1. So, &#39;z&#39; becomes 6, and &#39;y&#39; becomes 5.</li><li>These operators are widely used for looping, indexing arrays, and in various algorithms to control iterations, manipulate indices, and more, due to their ability to modify values efficiently by increments or decrements.</li></ul>`,9),r=[s];function l(o,c,d,h,p,m){return i(),a("div",null,r)}const y=e(n,[["render",l]]);export{u as __pageData,y as default};
