import{_ as e,c as o,o as a,U as t}from"./chunks/framework.EUmXWpxD.js";const _=JSON.parse('{"title":"Selection - Operator","description":"","frontmatter":{"layout":"doc","title":"Selection - Operator","prev":{"text":"Introduction","link":"./introduction"},"next":{"text":"If-else","link":"./ifelse"}},"headers":[],"relativePath":"coba/meeting-5/operator.md","filePath":"coba/meeting-5/operator.md"}'),r={name:"coba/meeting-5/operator.md"},i=t('<h1 id="operator" tabindex="-1">Operator <a class="header-anchor" href="#operator" aria-label="Permalink to &quot;Operator&quot;">​</a></h1><p><code>Operators</code> in selection refer to the logical or comparison symbols used to create conditions upon which decisions are based in programming. These operators allow the program to evaluate expressions and make choices.</p><h2 id="comparison-operator" tabindex="-1">Comparison Operator <a class="header-anchor" href="#comparison-operator" aria-label="Permalink to &quot;Comparison Operator&quot;">​</a></h2><ul><li>These operators compare values and return a boolean result (true or false).</li></ul><details class="details custom-block"><summary>Operators</summary><ul><li>Equal to (==)</li><li>Not equal to (!=)</li><li>Greater than (&gt;)</li><li>Less than (&lt;)</li><li>Greater than or equal to (&gt;=)</li><li>Less than or equal to (&lt;=)</li></ul></details><h2 id="logical-operators" tabindex="-1">Logical Operators <a class="header-anchor" href="#logical-operators" aria-label="Permalink to &quot;Logical Operators&quot;">​</a></h2><ul><li>These operators combine multiple conditions and produce a boolean result.</li></ul><details class="details custom-block"><summary>Operators</summary><ul><li>AND (and): Returns true if both conditions are true.</li><li>OR (or): Returns true if at least one condition is true.</li><li>NOT (not): Reverses the logical state of its operand.</li></ul></details>',8),l=[i];function s(n,c,p,u,d,m){return a(),o("div",null,l)}const f=e(r,[["render",s]]);export{_ as __pageData,f as default};
